/* 1953729 信09 吴浩泽 */

#include <cstdio>   //NULL
//不再允许包含任何系统头文件

/* ----- 不允许定义任何形式的全局变量/全部数组/只读全局变量/宏定义!!!!! ----- */

/* 函数实现部分，{ }内的东西可以任意调整，目前的return只是一个示例，可改变 */
/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strlen(const char *str)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (str == 0)
        return 0;
    const char* p = str;
    while (*str != '\0')
        str++;
    return str - p;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char *tj_strcat(char *s1, const char *s2)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    char* s = s1;
    if (s1 == 0)
        return 0;
    if (s1 != 0 && s2 == 0)
        return s1;
    s1 = s1 + tj_strlen(s1);
    for (; *s2 != '\0'; s2++)
    {
        *s1 = *s2;
        s1++;
    }
    *s1 = '\0';
    return s;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char *tj_strncat(char *s1, const char *s2, const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (s1 == 0)
        return 0;
    if (s1 != 0 && s2 == 0)
        return s1;
    char* s0 = s1;
    s1 = s1 + tj_strlen(s1);
    const char* s = s2;
    for (; *s2 != '\0' && s2 - s < len; s2++)
    {
        *s1 = *s2;
        s1++;
    }
    *s1 = '\0';
    return s0;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char *tj_strcpy(char *s1, const char *s2)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (s1 == 0)
        return 0;
    if (s1 != 0 && s2 == 0)
    {
        *s1 = '\0';
        return s1;
    }
    char* s0 = s1;
    for (; *s2 != '\0'; s2++)
    {
        *s1 = *s2;
        s1++;
    }
    *s1 = '\0';
    return s0;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char *tj_strncpy(char *s1, const char *s2, const int len)
{
    if (s1 == 0)
        return 0;
    if (s1 != 0 && s2 == 0)
        return s1;
    char* s0 = s1;
    const char* s = s2;
    for (; *s2 != '\0' && s2 - s < len; s2++)
    {
        *s1 = *s2;
        s1++;
    }
    return s0;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcmp(const char *s1, const char *s2)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (s1 == 0 && s2 == 0)
        return 0;
    if (s1 == 0 && s2 != 0)
        return -1;
    if (s1 != 0 && s2 == 0)
        return 1;
    while (*s1 == *s2 && *s1 != '\0' && *s2 != '\0')
    {
        s1++;
        s2++;
    }
    if (*s1 == '\0' && *s2 == '\0')
        return 0;
    else
        return *s1 - *s2;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcasecmp(const char *s1, const char *s2)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (s1 == 0 && s2 == 0)
        return 0;
    if (s1 == 0 && s2 != 0)
        return -1;
    if (s1 != 0 && s2 == 0)
        return 1;
    for (; *s1 != '\0' && *s2 != '\0'; s1++, s2++)
    {
        int j = 0, k = 0;
        if (*s1 >= 'A' && *s1 <= 'Z')
            j = 32;
        if (*s2 >= 'A' && *s2 <= 'Z')
            k = 32;
        if (*s1 + j != *s2 + k)
            return *s1 + j - *s2 - k;
    }
    int j = 0, k = 0;
    if (*s1 >= 'A' && *s1 <= 'Z')
        j = 32;
    if (*s2 >= 'A' && *s2 <= 'Z')
        k = 32;
    if (*s1 + j != *s2 + k)
        return *s1 + j - *s2 - k;
    else
        return 0;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strncmp(const char *s1, const char *s2, const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (s1 == 0 && s2 == 0)
        return 0;
    if (s1 == 0 && s2 != 0)
        return -1;
    if (s1 != 0 && s2 == 0)
        return 1;
    const char* s = s2;
    for (; *s1 != '\0' && *s2 != '\0' && s2 - s < len; s1++, s2++)
        if (*s1 != *s2)
            return *s1 - *s2;
    if (s2 - s == len)
        return 0;
    else
        return *s1 - *s2;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcasencmp(const char *s1, const char *s2, const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (s1 == 0 && s2 == 0)
        return 0;
    if (s1 == 0 && s2 != 0)
        return -1;
    if (s1 != 0 && s2 == 0)
        return 1;
    const char* s = s2;
    for (; *s1 != '\0' && *s2 != '\0' && s2 - s < len; s1++, s2++)
    {
        int j = 0, k = 0;
        if (*s1 >= 'A' && *s1 <= 'Z')
            j = 32;
        if (*s2 >= 'A' && *s2 <= 'Z')
            k = 32;
        if (*s1 + j != *s2 + k)
            return *s1 + j - *s2 - k;
    }
    if (s2 - s == len)
        return 0;
    int j = 0, k = 0;
    if (*s1 >= 'A' && *s1 <= 'Z')
        j = 32;
    if (*s2 >= 'A' && *s2 <= 'Z')
        k = 32;
    if (*s1 + j != *s2 + k)
        return *s1 + j - *s2 - k;
    else
        return 0;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char *tj_strupr(char *str)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (str == 0)
        return 0;
    char* s = str;
    for (; *str != '\0'; str++)
    {
        if (*str >= 'a' && *str <= 'z')
            *str = *str - 32;
    }
    return s;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char *tj_strlwr(char *str)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (str == 0)
        return 0;
    char* s = str;
    for (; *str != '\0'; str++)
    {
        if (*str >= 'A' && *str <= 'Z')
            *str = *str + 32;
    }
    return s;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strchr(const char *str, const char ch)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (str == 0)
        return 0;
    const char* s = str;
    for (; *str != '\0'; str++)
    {
        if (*str == ch)
            break;
    }
    if (*str == '\0')
        return 0;
    else
        return str - s + 1;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strstr(const char *str, const char *substr)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (str == 0 || substr == 0)
        return 0;
    const char* s = str;
    for (; *str != '\0'; str++)
    {
        if (*str == *substr)
        {
            const char* s1 = str;
            const char* s2 = substr;
            for (; *s2 != '\0'; s1++, s2++)
                if (*s1 != *s2)
                    break;
            if (*s2 == '\0')
                break;
        }
    }
    if (*str == '\0')
        return 0;
    else
        return str - s + 1;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strrchr(const char *str, const char ch)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (str == 0)
        return 0;
    const char* s0 = str;
    for (; *str != '\0'; str++)
    {
        if (*str == ch)
        {
            const char* s = str;
            s++; 
            for (; *s != '\0'; s++)
            {
                if (*s == ch)
                    break;
            }
            if (*s == '\0')
                break;
        }
    }
    if (*str == '\0')
        return 0;
    else
        return str - s0 + 1;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strrstr(const char *str, const char *substr)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (str == 0 || substr == 0)
        return 0;
    const char* s = str;
    for (; *str != '\0'; str++)
    {
        if (*str == *substr)
        {
            const char* s1 = str;
            const char* s2 = substr;
            for (; *s2 != '\0'; s1++, s2++)
            {
                if (*s1 != *s2)
                    break;
            }
            if (*s2 == '\0')
            {
                s1 = str + 1;
                s2 = substr;
                for (; *s1 != '\0'; s1++)
                {
                    if (*s1 == *s2)
                    {
                        const char* s3 = s1;
                        const char* s4 = s2;
                        for (; *s4 != '\0'; s3++, s4++)
                        {
                            if (*s3 != *s4)
                                break;
                        }
                        if (*s4 == '\0')
                            break;
                    }
                }
                if (*s1 == '\0')
                    break;
            }
        }
    }
    if (*str == '\0')
        return 0;
    else
        return str - s + 1;
}

/***************************************************************************
  函数名称：
  功    能：
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
char *tj_strrev(char *str)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    if (str == 0)
        return 0; 
    char* s0 = str;
    char* s = str;
    while (*str != '\0')
        str++;
    str--;
    for (; s < str; s++, str--)
    {
        char t;
        t = *s;
        *s = *str;
        *str = t;
    }
    return s0;
}
